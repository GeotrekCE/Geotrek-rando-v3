version: 2.1

orbs:
  skip: theodo/skip@0.0.4

executors:
  defaults_typescript:
    docker:
      - image: circleci/node:12.9

commands:
  checkout_merge:
    steps:
      - checkout
      - run:
          name: "Check for conflicts and merge main branch"
          command: git config user.email "circleci@circleci" && git config user.name "CircleCI" && git merge origin/main --no-ff

  yarn-install:
    parameters:
      workspace:
        type: string
    steps:
      - checkout_merge
      - skip/skip_unchanged:
          paths: << parameters.workspace >>
          git_base_branch: origin/main
      - attach_workspace:
          at: ~/geotrekRando/<< parameters.workspace >>
      - restore_cache:
          key: node-modules-cache-{{ checksum "<< parameters.workspace >>/yarn.lock" }}
      - run:
          working_directory: << parameters.workspace >>
          name: Install front dependencies
          command: yarn
      - save_cache:
          key: node-modules-cache-{{ checksum "<< parameters.workspace >>/yarn.lock" }}
          paths:
            - << parameters.workspace >>/node_modules
      - persist_to_workspace:
          root: ~/geotrekRando/<< parameters.workspace >>
          paths:
            - node_modules
            - .env

  yarn-tests:
    parameters:
      workspace:
        type: string
    steps:
      - checkout_merge
      - skip/skip_unchanged:
          paths: << parameters.workspace >>
          git_base_branch: origin/main
      - attach_workspace:
          at: ~/geotrekRando/<< parameters.workspace >>
      - run:
          working_directory: << parameters.workspace >>
          name: Unit test with coverage
          command: yarn test:coverage
      - store_artifacts:
          path: << parameters.workspace >>/coverage
      - run:
          working_directory: << parameters.workspace >>
          name: Run Typescript checker
          command: yarn tsc

  yarn-linter:
    parameters:
      workspace:
        type: string
    steps:
      - checkout_merge
      - skip/skip_unchanged:
          paths: << parameters.workspace >>
          git_base_branch: origin/main
      - attach_workspace:
          at: ~/geotrekRando/<< parameters.workspace >>
      - run:
          working_directory: << parameters.workspace >>
          name: Run linter
          command: yarn lint
      - store_artifacts:
          path: << parameters.workspace >>/coverage

  # yarn-audit:
  #   parameters:
  #     workspace:
  #       type: string
  #   steps:
  #     - checkout_merge
  #     # yarn-audit is started with a cron.
  #     # As such we cannot get the frontend dependencies from the workspace like we do with the other jobs. We need to re-install them.
  #     - run:
  #         working_directory: << parameters.workspace >>
  #         name: Install front dependencies
  #         command: yarn
  #     - run:
  #         working_directory: << parameters.workspace >>
  #         name: Check dependencies
  #         command: yarn audit-dependencies

  # deploy:
  #   steps:
  #     - setup_remote_docker:
  #         docker_layer_caching: false

  #     - run:
  #         name: Install system dependencies
  #         command: |
  #           apk add bash curl git make openssh python3 py-pip rsync zip gcc python3-dev libc-dev openssl-dev libffi-dev
  #           curl -sL https://sentry.io/get-cli/ | bash

  #     - checkout_merge

  #     - run:
  #         name: Install AWS CLI
  #         command: pip install awsebcli awscli

  #     - run:
  #         name: Create AWS profile
  #         command: |
  #           mkdir -p ~/.aws
  #           touch ~/.aws/credentials
  #           echo "[geotrekrando-deploy]" >> ~/.aws/credentials
  #           echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
  #           echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials

  #     - run:
  #         name: "Sentry: start build"
  #         working_directory: devops/deployment
  #         command: |
  #           [ -z "$SENTRY_AUTH_TOKEN"] || make sentry_start_build tag=$CIRCLE_SHA1

  #     - run:
  #         name: Build images
  #         working_directory: devops/deployment
  #         command: make images

  #     - run:
  #         name: "Sentry: upload source maps"
  #         working_directory: devops/deployment
  #         command: |
  #           [ -z "$SENTRY_AUTH_TOKEN"] || docker run --rm geotrekrando/frontend:latest bash /root/sentry-upload.sh $SENTRY_ORG $SENTRY_PROJECT $SENTRY_AUTH_TOKEN $CIRCLE_SHA1

  #     - run:
  #         name: Tag images for deployment
  #         command: |
  #           docker tag geotrekrando/frontend:latest $FRONTEND_REPO_URL:$CIRCLE_SHA1

  #     - run:
  #         name: Authenticate with registry
  #         command: $(aws ecr get-login --no-include-email --region )

  #     - run:
  #         name: Push docker images to registry
  #         command: |
  #           docker push $FRONTEND_REPO_URL:$CIRCLE_SHA1

  #     - run:
  #         name: Build EB archive
  #         working_directory: devops/deployment
  #         command: make archive.zip tag=$CIRCLE_SHA1

  #     - run:
  #         name: "Sentry: finish build"
  #         working_directory: devops/deployment
  #         command: |
  #           [ -z "$SENTRY_AUTH_TOKEN"] || make sentry_finish_build tag=$CIRCLE_SHA1

  #     - run:
  #         name: Deploy to EB
  #         working_directory: devops/deployment
  #         command: eb deploy

  #     - run:
  #         name: "Sentry: deploy"
  #         working_directory: devops/deployment
  #         command: |
  #           [ -z "$SENTRY_AUTH_TOKEN"] || make sentry_deploy tag=$CIRCLE_SHA1 env=$ENV

jobs:
  yarn-install-front:
    executor: defaults_typescript
    working_directory: ~/geotrekRando
    steps:
      - yarn-install:
          workspace: frontend

  react-tests:
    executor: defaults_typescript
    working_directory: ~/geotrekRando
    environment:
      NODE_ENV: test
    steps:
      - yarn-tests:
          workspace: frontend

  react-bundlesize:
    executor: defaults_typescript
    working_directory: ~/geotrekRando
    environment:
      NODE_ENV: production
    steps:
      - checkout_merge
      - skip/skip_unchanged:
          paths: frontend
          git_base_branch: origin/main
      - attach_workspace:
          at: ~/geotrekRando/frontend
      - run:
          working_directory: frontend
          name: Check bundle size
          command: yarn build && ./node_modules/.bin/bundlesize
      - store_artifacts:
          path: frontend/coverage

  react-linter:
    executor: defaults_typescript
    working_directory: ~/geotrekRando
    environment:
      NODE_ENV: production
    steps:
      - checkout_merge
      - skip/skip_unchanged:
          paths: frontend
          git_base_branch: origin/main
      - yarn-linter:
          workspace: frontend
      - run:
          working_directory: frontend
          name: Run css linter
          command: yarn lint-style
      - store_artifacts:
          path: frontend/coverage


workflows:
  version: 2
  stack:
    jobs:
      - yarn-install-front
      - react-tests:
          requires:
            - yarn-install-front
      - react-bundlesize:
          requires:
            - yarn-install-front
      - react-linter:
          requires:
            - yarn-install-front
