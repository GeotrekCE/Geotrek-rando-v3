{
  "Import function to test + add a corresponding describe": {
    "prefix": "test",
    "body": [
      "import { ${2:thingToTest} } from '${1:path}'",
      "",
      "describe('${2:thingToTest}', () => {",
      "  it('should ${3:dowhat}', () => {",
      "    const input = ${4:input};",
      "    const output = ${2:thingToTest}(input);",
      "    const expected = ${5:expected};",
      "",
      "    expect(output).toBe(expected);",
      "  })",
      "})",
      ""
    ],
    "description": "Create a describe with a first it in it"
  },
  "Create a describe with a first it in it": {
    "prefix": "describe ",
    "body": [
      "describe('${1:thingToTest}', () => {",
      "  it('should ${2:dowhat}', () => {",
      "    const input = ${3:input};",
      "    const output = ${1:output}(input);",
      "    const expected = ${4:expected};",
      "",
      "    expect(output).toBe(expected);",
      "  })",
      "})"
    ],
    "description": "Create a describe with a first it in it"
  },
  "Create a it": {
    "prefix": "it",
    "body": [
      "it('should ${1:dowhat}', () => {",
      "  const input = ${2:input};",
      "  const output = ${3:thingToTest}(input);",
      "  const expected = ${4:expected};",
      "",
      "  expect(output).toBe(expected);",
      "})"
    ],
    "description": "Create a it"
  },
  "Create a functionnal component": {
    "prefix": "fc",
    "body": [
      "interface  ${1}Props {",
      " $2",
      "}",
      "",
      "export const $1: React.FC<${1}Props> = ( { $3 } ) => {",
      "  return( $4 );",
      "};"
    ],
    "description": "Create a functionnal component with props"
  },
  "Create index": {
    "prefix": "ifc",
    "body": ["export { $1 } from './$1';"],
    "description": "Create index for FC export"
  },
  "Template for module mocks": {
    "prefix": "modulemock",
    "body": [
      "import { mockRoute } from 'services/testing/utils';",
      "",
      "export const mock${1:moduleName}Response = () => ({});",
      "",
      "export const mock${1:moduleName}Route = (times: number): void =>",
      "  mockRoute({",
      "    route: '/${2:route}',",
      "    mockData: mock${1:moduleName}Response(),",
      "    additionalQueries: {",
      "      fields: '${3:apiFields}',",
      "      page_size: ${4:5},",
      "    },",
      "    times,",
      "  });",
      ""
    ],
    "description": "Template for module mocks"
  }
}
